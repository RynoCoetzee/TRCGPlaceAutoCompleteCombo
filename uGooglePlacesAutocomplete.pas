unit uGooglePlacesAutocomplete;

//  *************************************************
//    Generated By: JsonToDelphiClass - 0.65
//    Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
//    Generated On: 2016-11-11 12:02:45
//  *************************************************
//    Created By  : Petar Georgiev - 2014
//    WebSite     : http://pgeorgiev.com
//  *************************************************

interface

uses Generics.Collections, Rest.Json;

type

TTermsClass = class
private
  FOffset: Extended;
  FValue: String;
public
  property offset: Extended read FOffset write FOffset;
  property value: String read FValue write FValue;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TTermsClass;
end;

TMain_text_matched_substringsClass = class
private
  FLength: Extended;
  FOffset: Extended;
public
  property length: Extended read FLength write FLength;
  property offset: Extended read FOffset write FOffset;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TMain_text_matched_substringsClass;
end;

TStructured_formattingClass = class
private
  FMain_text: String;
  FMain_text_matched_substrings: TArray<TMain_text_matched_substringsClass>;
  FSecondary_text: String;
public
  property main_text: String read FMain_text write FMain_text;
  property main_text_matched_substrings: TArray<TMain_text_matched_substringsClass> read FMain_text_matched_substrings write FMain_text_matched_substrings;
  property secondary_text: String read FSecondary_text write FSecondary_text;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TStructured_formattingClass;
end;

TMatched_substringsClass = class
private
  FLength: Extended;
  FOffset: Extended;
public
  property length: Extended read FLength write FLength;
  property offset: Extended read FOffset write FOffset;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TMatched_substringsClass;
end;

TPredictionsClass = class
private
  FDescription: String;
  FId: String;
  FMatched_substrings: TArray<TMatched_substringsClass>;
  FPlace_id: String;
  FReference: String;
  FStructured_formatting: TStructured_formattingClass;
  FTerms: TArray<TTermsClass>;
  FTypes: TArray<String>;
public
  property description: String read FDescription write FDescription;
  property id: String read FId write FId;
  property matched_substrings: TArray<TMatched_substringsClass> read FMatched_substrings write FMatched_substrings;
  property place_id: String read FPlace_id write FPlace_id;
  property reference: String read FReference write FReference;
  property structured_formatting: TStructured_formattingClass read FStructured_formatting write FStructured_formatting;
  property terms: TArray<TTermsClass> read FTerms write FTerms;
  property types: TArray<String> read FTypes write FTypes;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TPredictionsClass;
end;

TPredictionsRootClass = class
private
  FPredictions: TArray<TPredictionsClass>;
  FStatus: String;
public
  property predictions: TArray<TPredictionsClass> read FPredictions write FPredictions;
  property status: String read FStatus write FStatus;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TPredictionsRootClass;
end;

implementation

{TTermsClass}


function TTermsClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TTermsClass.FromJsonString(AJsonString: string): TTermsClass;
begin
  result := TJson.JsonToObject<TTermsClass>(AJsonString)
end;

{TMain_text_matched_substringsClass}


function TMain_text_matched_substringsClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TMain_text_matched_substringsClass.FromJsonString(AJsonString: string): TMain_text_matched_substringsClass;
begin
  result := TJson.JsonToObject<TMain_text_matched_substringsClass>(AJsonString)
end;

{TStructured_formattingClass}

destructor TStructured_formattingClass.Destroy;
var
  Lmain_text_matched_substringsItem: TMain_text_matched_substringsClass;
begin

 for Lmain_text_matched_substringsItem in FMain_text_matched_substrings do
   Lmain_text_matched_substringsItem.free;

  inherited;
end;

function TStructured_formattingClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TStructured_formattingClass.FromJsonString(AJsonString: string): TStructured_formattingClass;
begin
  result := TJson.JsonToObject<TStructured_formattingClass>(AJsonString)
end;

{TMatched_substringsClass}


function TMatched_substringsClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TMatched_substringsClass.FromJsonString(AJsonString: string): TMatched_substringsClass;
begin
  result := TJson.JsonToObject<TMatched_substringsClass>(AJsonString)
end;

{TPredictionsClass}

constructor TPredictionsClass.Create;
begin
  inherited;
  FStructured_formatting := TStructured_formattingClass.Create();
end;

destructor TPredictionsClass.Destroy;
var
  Lmatched_substringsItem: TMatched_substringsClass;
  LtermsItem: TTermsClass;
begin

 for Lmatched_substringsItem in FMatched_substrings do
   Lmatched_substringsItem.free;
 for LtermsItem in FTerms do
   LtermsItem.free;

  FStructured_formatting.free;
  inherited;
end;

function TPredictionsClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TPredictionsClass.FromJsonString(AJsonString: string): TPredictionsClass;
begin
  result := TJson.JsonToObject<TPredictionsClass>(AJsonString)
end;

{TPredictionsRootClass}

destructor TPredictionsRootClass.Destroy;
var
  LpredictionsItem: TPredictionsClass;
begin
 for LpredictionsItem in FPredictions do
   LpredictionsItem.free;

  inherited;
end;

function TPredictionsRootClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TPredictionsRootClass.FromJsonString(AJsonString: string): TPredictionsRootClass;
begin
  result := TJson.JsonToObject<TPredictionsRootClass>(AJsonString)
end;

end.
