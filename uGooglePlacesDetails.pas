unit uGooglePlacesDetails;

//  *************************************************
//    Generated By: JsonToDelphiClass - 0.65
//    Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
//    Generated On: 2016-11-11 12:04:06
//  *************************************************
//    Created By  : Petar Georgiev - 2014
//    WebSite     : http://pgeorgiev.com
//  *************************************************

interface

uses Generics.Collections, Rest.Json;

type

TSouthwestClass = class
private
  FLat: Extended;
  FLng: Extended;
public
  property lat: Extended read FLat write FLat;
  property lng: Extended read FLng write FLng;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TSouthwestClass;
end;

TNortheastClass = class
private
  FLat: Extended;
  FLng: Extended;
public
  property lat: Extended read FLat write FLat;
  property lng: Extended read FLng write FLng;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TNortheastClass;
end;

TViewportClass = class
private
  FNortheast: TNortheastClass;
  FSouthwest: TSouthwestClass;
public
  property northeast: TNortheastClass read FNortheast write FNortheast;
  property southwest: TSouthwestClass read FSouthwest write FSouthwest;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TViewportClass;
end;

TLocationClass = class
private
  FLat: Extended;
  FLng: Extended;
public
  property lat: Extended read FLat write FLat;
  property lng: Extended read FLng write FLng;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TLocationClass;
end;

TGeometryClass = class
private
  FLocation: TLocationClass;
  FViewport: TViewportClass;
public
  property location: TLocationClass read FLocation write FLocation;
  property viewport: TViewportClass read FViewport write FViewport;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TGeometryClass;
end;

TAddress_componentsClass = class
private
  FLong_name: String;
  FShort_name: String;
  FTypes: TArray<String>;
public
  property long_name: String read FLong_name write FLong_name;
  property short_name: String read FShort_name write FShort_name;
  property types: TArray<String> read FTypes write FTypes;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TAddress_componentsClass;
end;

TResultClass = class
private
  FAddress_components: TArray<TAddress_componentsClass>;
  FAdr_address: String;
  FFormatted_address: String;
  FGeometry: TGeometryClass;
  FIcon: String;
  FId: String;
  FName: String;
  FPlace_id: String;
  FReference: String;
  FScope: String;
  FTypes: TArray<String>;
  FUrl: String;
  FUtc_offset: Extended;
  FVicinity: String;
public
  property address_components: TArray<TAddress_componentsClass> read FAddress_components write FAddress_components;
  property adr_address: String read FAdr_address write FAdr_address;
  property formatted_address: String read FFormatted_address write FFormatted_address;
  property geometry: TGeometryClass read FGeometry write FGeometry;
  property icon: String read FIcon write FIcon;
  property id: String read FId write FId;
  property name: String read FName write FName;
  property place_id: String read FPlace_id write FPlace_id;
  property reference: String read FReference write FReference;
  property scope: String read FScope write FScope;
  property types: TArray<String> read FTypes write FTypes;
  property url: String read FUrl write FUrl;
  property utc_offset: Extended read FUtc_offset write FUtc_offset;
  property vicinity: String read FVicinity write FVicinity;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TResultClass;
end;

TPlaceRootClass = class
private
  FHtml_attributions: TArray<String>;
  FResult: TResultClass;
  FStatus: String;
public
  property html_attributions: TArray<String> read FHtml_attributions write FHtml_attributions;
  property result: TResultClass read FResult write FResult;
  property status: String read FStatus write FStatus;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TPlaceRootClass;
end;

implementation

{TSouthwestClass}


function TSouthwestClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TSouthwestClass.FromJsonString(AJsonString: string): TSouthwestClass;
begin
  result := TJson.JsonToObject<TSouthwestClass>(AJsonString)
end;

{TNortheastClass}


function TNortheastClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TNortheastClass.FromJsonString(AJsonString: string): TNortheastClass;
begin
  result := TJson.JsonToObject<TNortheastClass>(AJsonString)
end;

{TViewportClass}

constructor TViewportClass.Create;
begin
  inherited;
  FNortheast := TNortheastClass.Create();
  FSouthwest := TSouthwestClass.Create();
end;

destructor TViewportClass.Destroy;
begin
  FNortheast.free;
  FSouthwest.free;
  inherited;
end;

function TViewportClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TViewportClass.FromJsonString(AJsonString: string): TViewportClass;
begin
  result := TJson.JsonToObject<TViewportClass>(AJsonString)
end;

{TLocationClass}


function TLocationClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TLocationClass.FromJsonString(AJsonString: string): TLocationClass;
begin
  result := TJson.JsonToObject<TLocationClass>(AJsonString)
end;

{TGeometryClass}

constructor TGeometryClass.Create;
begin
  inherited;
  FLocation := TLocationClass.Create();
  FViewport := TViewportClass.Create();
end;

destructor TGeometryClass.Destroy;
begin
  FLocation.free;
  FViewport.free;
  inherited;
end;

function TGeometryClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TGeometryClass.FromJsonString(AJsonString: string): TGeometryClass;
begin
  result := TJson.JsonToObject<TGeometryClass>(AJsonString)
end;

{TAddress_componentsClass}


function TAddress_componentsClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TAddress_componentsClass.FromJsonString(AJsonString: string): TAddress_componentsClass;
begin
  result := TJson.JsonToObject<TAddress_componentsClass>(AJsonString)
end;

{TResultClass}

constructor TResultClass.Create;
begin
  inherited;
  FGeometry := TGeometryClass.Create();
end;

destructor TResultClass.Destroy;
var
  Laddress_componentsItem: TAddress_componentsClass;
begin

 for Laddress_componentsItem in FAddress_components do
   Laddress_componentsItem.free;

  FGeometry.free;
  inherited;
end;

function TResultClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TResultClass.FromJsonString(AJsonString: string): TResultClass;
begin
  result := TJson.JsonToObject<TResultClass>(AJsonString)
end;

{TRootClass}

constructor TPlaceRootClass.Create;
begin
  inherited;
  FResult := TResultClass.Create();
end;

destructor TPlaceRootClass.Destroy;
begin
  FResult.free;
  inherited;
end;

function TPlaceRootClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TPlaceRootClass.FromJsonString(AJsonString: string): TPlaceRootClass;
begin
  result := TJson.JsonToObject<TPlaceRootClass>(AJsonString)
end;

end.

